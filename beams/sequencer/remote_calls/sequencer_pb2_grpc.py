# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from beams.sequencer.remote_calls import sequencer_pb2 as beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2


class SequencerStub(object):
    """Sequencer Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnqueueCommand = channel.unary_unary(
                '/Sequencer/EnqueueCommand',
                request_serializer=beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.GenericCommand.SerializeToString,
                response_deserializer=beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.CommandReply.FromString,
                )
        self.RequestHeartBeat = channel.unary_unary(
                '/Sequencer/RequestHeartBeat',
                request_serializer=beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.Empty.SerializeToString,
                response_deserializer=beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.CommandReply.FromString,
                )


class SequencerServicer(object):
    """Sequencer Service Definition
    """

    def EnqueueCommand(self, request, context):
        """Enqueue a sequence command of varying priority
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestHeartBeat(self, request, context):
        """Heart beat message for clients
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SequencerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnqueueCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.EnqueueCommand,
                    request_deserializer=beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.GenericCommand.FromString,
                    response_serializer=beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.CommandReply.SerializeToString,
            ),
            'RequestHeartBeat': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestHeartBeat,
                    request_deserializer=beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.Empty.FromString,
                    response_serializer=beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.CommandReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Sequencer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Sequencer(object):
    """Sequencer Service Definition
    """

    @staticmethod
    def EnqueueCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sequencer/EnqueueCommand',
            beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.GenericCommand.SerializeToString,
            beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.CommandReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestHeartBeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Sequencer/RequestHeartBeat',
            beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.Empty.SerializeToString,
            beams_dot_sequencer_dot_remote__calls_dot_sequencer__pb2.CommandReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
